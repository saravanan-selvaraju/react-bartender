{"version":3,"sources":["components/Nav.js","constants.js","components/Home.js","components/Footer.js","components/Show.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","src","process","href","api","Home","Listitems","menu","Object","entries","key","value","push","alt","Component","Footer","Show","props","useState","setErrors","result","setResult","category","match","params","isLoading","setIsLoaing","useEffect","a","async","fetch","json","then","res","drinks","catch","err","map","drink","idDrink","to","strDrinkThumb","strDrink","Details","id","details","setDetails","list","keys","includes","replace","strGlass","dateModified","split","strInstructions","App","basename","render","location","exact","path","component","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.672dcf6b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Nav() {\r\n    return (\r\n        <nav>\r\n            <div>\r\n                <img className=\"App-Logo-Img\" src={process.env.PUBLIC_URL + '/img/ico/bartender.svg'}/>\r\n                <a className=\"App-Logo\" href={process.env.PUBLIC_URL +\"/\"}>Bartender</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n\r\n","export const list_ico = '/img/ico';\r\nexport const api = 'https://www.thecocktaildb.com/api/json/v1/1/';","import React, { Component } from 'react'\r\nimport {list_ico} from '../constants';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        var Listitems = []\r\n        const menu = {'Cocktail':`${list_ico}/cocktail.svg`, 'Shot':`${list_ico}/shot.svg`, 'Beer' : `${list_ico}/beer.svg`, 'Homemade Liqueur':`${list_ico}/homemade.svg`};\r\n        const prefix = '/show/'\r\n        for (const [key, value] of Object.entries(menu)) {\r\n            Listitems.push( <a className=\"App-List\" href={prefix + key}><img className=\"List-Icon\" alt={key} src={process.env.PUBLIC_URL + value}></img><p className=\"List-Name\">{key}</p></a>);\r\n        }\r\n        return (\r\n            <div className=\"App-Container\">\r\n                {Listitems}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Home;","import React from 'react'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"Footer\">\r\n            <p>Fork on Github <a href=\"/\">react-bartender</a></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { useState, useEffect } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {api} from '../constants.js';\r\n\r\nconst Show = (props)=> {\r\n    const [hasError, setErrors] = useState(false);\r\n    var [result, setResult] = useState([]);\r\n    const category = props.match.params.category;\r\n    var [isLoading, setIsLoaing] = useState(true);\r\n    useEffect(() => {\r\n      async function fetchData() {\r\n        const res = await fetch(`${api}filter.php?c=${category}`);\r\n        res\r\n          .json()\r\n          .then(res => setResult(res.drinks))\r\n          .catch(err => setErrors(err));\r\n          setIsLoaing(false);\r\n      }\r\n      fetchData();\r\n      \r\n    },[]);\r\n\r\n\r\n    return (\r\n        <div className=\"List-Container\">\r\n            {  \r\n               result.map(drink => \r\n              <Link className=\"List\" key={drink.idDrink} to={`/view/${category}/${drink.idDrink}`}>\r\n                <img className=\"List-Thump\" src={`${drink.strDrinkThumb}/preview`}></img>\r\n                <p className=\"List-Title\">{drink.strDrink}</p>\r\n              </Link>\r\n              )\r\n            }\r\n            {isLoading&&<div className=\"Loader\"></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Show;","import React, { useState, useEffect } from 'react';\r\nimport { api } from '../constants.js';\r\n\r\nfunction Details(props) {\r\n    var id = props.match.params.id;\r\n    const [hasError, setErrors] = useState(false);\r\n    const [details, setDetails] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const res = await fetch(`${api}lookup.php?i=${id}`);\r\n            res\r\n                .json()\r\n                .then(res => setDetails(res.drinks[0]))\r\n                .catch(err => setErrors(err));\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    let list = []\r\n    for (var key of Object.keys(details)) {\r\n        if (key.includes(\"strIngredient\") && details[key] != null) {\r\n            list.push(<tr key={key}><td>{details[key]}</td><td>{details[key.replace('strIngredient', 'strMeasure')]}</td></tr>)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"Details\">\r\n            <div className=\"Details-Left\">\r\n                <div className=\"card\">\r\n                <img className=\"Details-Img\" src={details.strDrinkThumb}></img>\r\n                <h3 className=\"Details-Title\">{details.strDrink}</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"Details-Right\">\r\n            <h4>Ingredients</h4>\r\n            <div className=\"Details-Tag\">\r\n                    <img src={process.env.PUBLIC_URL + \"/img/ico/glass.svg\"} className=\"Tag-Ico\"></img><p className=\"Glass\">{details.strGlass}</p>\r\n                    <img src={process.env.PUBLIC_URL + \"/img/ico/clock.svg\"} className=\"Tag-Ico\"></img><p className=\"Date\">\r\n                    {\r\n                        details.dateModified  && details.dateModified.split(' ')[0]\r\n                    }\r\n                    </p>\r\n                </div>\r\n            <table className=\"Details-Table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Measure</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            list\r\n                        }\r\n                    </tbody>\r\n                </table>  \r\n                <h4>Instructions</h4>\r\n                <p>\r\n                    {details.strInstructions}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Details;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport Footer from './components/Footer';\nimport Show from './components/Show';\nimport Details from './components/Details';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename=\"/\">\n        <Route\n          render={({location}) => (\n            <div>\n              <Nav/>\n              <Route exact path=\"/\" render={() => <Redirect to=\"/\" />} />\n              <Switch location={location}>\n              <Route exact path={'/'} component ={Home} />\n                <Route path={\"/show/:category\"} component ={Show} />\n                <Route path={\"/view/:category/:id\"} component ={Details} />\n                <Redirect to=\"/\" />\n              </Switch>\n            </div>\n          )}\n        />\n        <Footer></Footer>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}